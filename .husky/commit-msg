npx commitlint --edit "$1"
# Commit Message Convention:
# <type>[optional scope]: <description>
#
# [optional body]
#
# [optional footer(s)]
#
# Types:
# feat:     A new feature
# fix:      A bug fix
# docs:     Documentation only changes
# style:    Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
# refactor: A code change that neither fixes a bug nor adds a feature
# perf:     A code change that improves performance
# test:     Adding missing tests or correcting existing tests
# build:    Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
# ci:       Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)
# chore:    Other changes that don't modify src or test files
# revert:   Reverts a previous commit
#
# Scope:
# The scope should be the name of the npm package affected (as perceived by the person reading the changelog generated from commit messages).
#
# Examples of valid commit messages:
# feat(blog): add new blog post feature
# fix(auth): resolve issue with user authentication
# docs: update README with installation instructions
# style: format code according to style guide
# refactor(search): improve performance of search algorithm
# test(profile): add unit tests for user profile module
# chore: update dependencies to latest versions
# perf(api): optimize database queries
# build(docker): update Dockerfile for production
# ci(travis): add new test environment
# revert: revert commit abc123
#
# Breaking Changes:
# A commit that has a footer BREAKING CHANGE:, or appends a ! after the type/scope, introduces a breaking API change.
# A BREAKING CHANGE can be part of commits of any type.
#
# Examples:
# feat!: send an email to the customer when a product is shipped
# feat(api)!: remove user endpoint
# chore!: drop support for Node 6
#
# For more information on commit message conventions, visit:
# https://www.conventionalcommits.org/

